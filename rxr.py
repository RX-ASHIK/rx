from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv
import os
import logging

# рж▓ржЧрж┐ржВ ржХржиржлрж┐ржЧрж╛рж░
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REQUIRED_GROUPS = ["@EarningMasterbd24"]
ADMIN_USERNAME = "@EarningMaster_help"  # ржПржбржорж┐ржи ржЗржЙржЬрж╛рж░ржирзЗржо

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    try:
        # ржЧрзНрж░рзБржк ржорзЗржорзНржмрж╛рж░рж╢рж┐ржк ржЪрзЗржХ
        for group in REQUIRED_GROUPS:
            member = await context.bot.get_chat_member(group, user.id)
            if member.status not in ["member", "administrator", "creator"]:
                await update.message.reply_html(
                    "ЁЯФТ <b>ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рзАржорж┐ржд!</b>\n\n"
                    "ЁЯУМ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи ржХрж░рзБржи:\n"
                    f"тЮд {group}\n\n"
                    "тЬЕ ржЬрзЯрзЗржи ржХрж░рзЗ ржЖржмрж╛рж░ /start ржЯрж╛ржЗржк ржХрж░рзБржи"
                )
                return

        # ржорзЗржЗржи ржорзЗржирзБ ржмрж╛ржЯржи
        keyboard = [
            [InlineKeyboardButton("ЁЯЖШ рж╕рж╛рж╣рж╛ржпрзНржп", callback_data="help")],
            [InlineKeyboardButton("ЁЯУв ржЕржлрж┐рж╕рж┐рзЯрж╛рж▓ ржЧрзНрж░рзБржк", url=f"https://t.me/{group[1:]}")]
        ]
        
        await update.message.reply_html(
            f"тЬи <b>рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!</b>\n\n"
            "ЁЯТ╝ ржЖржорж╛ржжрзЗрж░ ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ рж╕рж╛рж░рзНржнрж┐рж╕рзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо\n\n"
            "ЁЯЫая╕П рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржи ржЯрзНржпрж╛ржк ржХрж░рзБржи",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"Error: {e}")
        await update.message.reply_text("тЪая╕П рж╕рж┐рж╕рзНржЯрзЗржорзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи")

async def help_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # ржПржбржорж┐ржи ржХржирзНржЯрж╛ржХрзНржЯ ржЗржиржлрзЛ рж╕рж╣ рж╣рзЗрж▓рзНржк ржорзЗрж╕рзЗржЬ
    help_text = (
        "ЁЯЖШ <b>рж╕рж╛рж╣рж╛ржпрзНржп ржХрзЗржирзНржжрзНрж░</b>\n\n"
        "ржЖржкржирж┐ ржпржжрж┐ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛рзЯ ржкрзЬрзЗржи:\n\n"
        f"ЁЯУй рж╕рж░рж╛рж╕рж░рж┐ ржПржбржорж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: {ADMIN_USERNAME}\n\n"
        "ЁЯУМ рж╕рж╛ржзрж╛рж░ржг рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорж╛ржзрж╛ржи:\n"
        "тАв ржмржЯ рж░рзЗрж╕ржкржирзНрж╕ ржжрж┐ржЪрзНржЫрзЗ ржирж╛? /start ржЯрзНрж░рж╛ржЗ ржХрж░рзБржи\n"
        "тАв ржЧрзНрж░рзБржкрзЗ ржЬрзЯрзЗржи рж╕ржорж╕рзНржпрж╛? рж▓рж┐ржВржХ ржЖржмрж╛рж░ ржЪрзЗржХ ржХрж░рзБржи\n"
        "тАв ржЕржирзНржп ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛? ржирж┐ржЪрзЗ ржПржбржорж┐ржи ржХржирзНржЯрж╛ржХрзНржЯ ржжрж┐ржи"
    )
    
    await query.edit_message_text(
        text=help_text,
        parse_mode="HTML"
    )

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CommandHandler("start", start))
    
    # ржХрж▓ржмрзНржпрж╛ржХ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CallbackQueryHandler(help_button, pattern="^help$"))
    
    logger.info("ржмржЯ рж╕ржХрзНрж░рж┐рзЯ рж╣рзЯрзЗржЫрзЗ...")
    app.run_polling()

if __name__ == "__main__":
    main()
