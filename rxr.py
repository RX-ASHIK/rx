import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import sqlite3
import uuid
from dotenv import load_dotenv
import os

# ‡¶≤‡ßã‡¶° ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤
load_dotenv()

# ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
BOT_TOKEN = os.getenv("BOT_TOKEN")
REQUIRED_GROUP = "@EarningMasterbd24"
MINI_APP_URL = "https://earningmaster244.blogspot.com/?m=1&ref={ref_code}"  # ‡¶∏‡¶†‡¶ø‡¶ï URL ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü

# ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
def init_db():
    conn = sqlite3.connect('/opt/render/project/src/referral.db')  # Render-‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶™‡¶æ‡¶•
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            referral_code TEXT UNIQUE,
            referrals INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:  # ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡ßü‡ßá ‡¶è‡¶∏‡ßá‡¶õ‡ßá
        await track_referral(update, context)
        return

    user = update.effective_user
    try:
        # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ö‡ßá‡¶ï
        member = await context.bot.get_chat_member(REQUIRED_GROUP, user.id)
        if member.status not in ["member", "administrator", "creator"]:
            await update.message.reply_html(
                f"‚ö†Ô∏è <b>Access Denied!</b>\n\n"
                f"Join {REQUIRED_GROUP} first, then try /start again."
            )
            return

        # ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶ï‡ßã‡¶° ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶¨‡¶æ ‡¶´‡ßá‡¶ö
        conn = sqlite3.connect('/opt/render/project/src/referral.db')
        cursor = conn.cursor()
        cursor.execute('SELECT referral_code FROM users WHERE user_id = ?', (user.id,))
        result = cursor.fetchone()

        ref_code = result[0] if result else str(uuid.uuid4())[:8]
        if not result:
            cursor.execute(
                'INSERT INTO users (user_id, username, referral_code) VALUES (?, ?, ?)',
                (user.id, user.username or "", ref_code)
            )
            conn.commit()

        # ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡¶ø‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ URL ‡¶§‡ßà‡¶∞‡¶ø
        mini_app_url = f"https://t.me/{context.bot.username}/app?startapp={ref_code}"  # Telegram Web App ‡¶≤‡¶ø‡¶Ç‡¶ï
        blog_url = MINI_APP_URL.format(ref_code=ref_code)  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶≤‡¶ó URL

        keyboard = [
            [InlineKeyboardButton("‚ú® Open Mini App", web_app=WebAppInfo(url=blog_url))],  # WebAppInfo ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            [InlineKeyboardButton("üìä My Referrals", callback_data="my_refs")]
        ]
        
        await update.message.reply_html(
            f"üéâ <b>Welcome, {user.first_name}!</b>\n\n"
            f"üîó Your referral link:\n<code>https://t.me/{context.bot.username}?start={ref_code}</code>\n\n"
            "Click below to open the Mini App:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logging.error(f"Error: {e}")
        await update.message.reply_text("‚ùå Bot error. Contact admin.")
    finally:
        if 'conn' in locals():
            conn.close()

# ... (‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ï‡ßã‡¶° ‡¶è‡¶ï‡¶á ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¶‡¶ø‡¶® track_referral ‡¶è‡¶¨‡¶Ç show_referrals ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(show_referrals, pattern="^my_refs$"))
    app.run_polling()

if __name__ == "__main__":
    main()
